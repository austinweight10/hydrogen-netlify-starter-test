{"version":3,"file":"bca3d137.js","sources":["../../../node_modules/@shopify/hydrogen/dist/esnext/utilities/image_size.js","../../../node_modules/@shopify/hydrogen/dist/esnext/components/Image/Image.js"],"sourcesContent":["// TODO: Are there other CDNs missing from here?\nconst PRODUCTION_CDN_HOSTNAMES = [\n    'cdn.shopify.com',\n    'cdn.shopifycdn.net',\n    'shopify-assets.shopifycdn.com',\n    'shopify-assets.shopifycdn.net',\n];\nconst LOCAL_CDN_HOSTNAMES = ['spin.dev'];\nconst ALL_CDN_HOSTNAMES = [...PRODUCTION_CDN_HOSTNAMES, ...LOCAL_CDN_HOSTNAMES];\n/**\n * Adds image size parameters to an image URL hosted by Shopify's CDN\n */\nexport function addImageSizeParametersToUrl({ src, width, height, crop, scale, }) {\n    if (scale) {\n        // Have to do this specifically for 'scale' because it doesn't currently work otherwise.\n        // I'm also intentionally leaving 'scale' as a searchParam because that way it'll \"just work\" in the future and we can just delete this whole section of code\n        // We assume here that the last `.` is the delimiter between the file name and the file type\n        const baseUrl = new URL(src);\n        const fileDelimiterIndex = baseUrl.pathname.lastIndexOf('.');\n        const fileName = baseUrl.pathname.slice(0, fileDelimiterIndex);\n        const fileType = baseUrl.pathname.slice(fileDelimiterIndex);\n        baseUrl.pathname = `${fileName}${`@${scale.toString()}x`}${fileType}`;\n        src = baseUrl.toString();\n    }\n    const newUrl = new URL(src);\n    width && newUrl.searchParams.append('width', width.toString());\n    height && newUrl.searchParams.append('height', height.toString());\n    crop && newUrl.searchParams.append('crop', crop);\n    scale && newUrl.searchParams.append('scale', scale.toString());\n    return newUrl.toString();\n}\nexport function shopifyImageLoader(params) {\n    const newSrc = new URL(params.src);\n    const isShopifyServedImage = ALL_CDN_HOSTNAMES.some((allowedHostname) => newSrc.hostname.endsWith(allowedHostname));\n    if (!isShopifyServedImage ||\n        (!params.width && !params.height && !params.crop && !params.scale)) {\n        return params.src;\n    }\n    return addImageSizeParametersToUrl(params);\n}\n/**\n * Width and height are determined using the followiing priority list:\n * 1. `loaderOptions`'s width/height\n * 2. `elementProps`'s width/height\n * 3. `data`'s width/height\n *\n * If only one of `width` or `height` are defined, then the other will attempt to be calculated based on the Image's aspect ratio,\n * provided that both `data.width` and `data.height` are available. If not, then the aspect ratio cannot be determined and the missing\n * value will reamin as `null`\n */\nexport function getShopifyImageDimensions({ data: sfapiImage, loaderOptions, elementProps, }) {\n    let aspectRatio = null;\n    if (sfapiImage?.width && sfapiImage?.height) {\n        aspectRatio = sfapiImage?.width / sfapiImage?.height;\n    }\n    //  * 1. `loaderOptions`'s width/height\n    if (loaderOptions?.width || loaderOptions?.height) {\n        return {\n            width: loaderOptions?.width ??\n                (aspectRatio\n                    ? // @ts-expect-error if width isn't defined, then height has to be defined due to the If statement above\n                        Math.round(aspectRatio * loaderOptions.height)\n                    : null),\n            height: loaderOptions?.height ??\n                (aspectRatio\n                    ? // @ts-expect-error if height isn't defined, then width has to be defined due to the If statement above\n                        Math.round(aspectRatio * loaderOptions.width)\n                    : null),\n        };\n    }\n    //  * 2. `elementProps`'s width/height\n    if (elementProps?.width || elementProps?.height) {\n        return {\n            width: elementProps?.width ??\n                (aspectRatio\n                    ? // @ts-expect-error if width isn't defined, then height has to be defined due to the If statement above\n                        Math.round(aspectRatio * elementProps.height)\n                    : null),\n            height: elementProps?.height ??\n                (aspectRatio\n                    ? // @ts-expect-error if height isn't defined, then width has to be defined due to the If statement above\n                        Math.round(aspectRatio * elementProps.width)\n                    : null),\n        };\n    }\n    //  * 3. `data`'s width/height\n    if (sfapiImage?.width || sfapiImage?.height) {\n        return {\n            // can't calculate the aspect ratio here\n            width: sfapiImage?.width ?? null,\n            height: sfapiImage?.height ?? null,\n        };\n    }\n    return { width: null, height: null };\n}\n","import * as React from 'react';\nimport { getShopifyImageDimensions, shopifyImageLoader, addImageSizeParametersToUrl, } from '../../utilities';\n/**\n * The `Image` component renders an image for the Storefront API's\n * [Image object](https://shopify.dev/api/storefront/reference/common-objects/image) by using the `data` prop, or a custom location by using the `src` prop. You can [customize this component](https://shopify.dev/api/hydrogen/components#customizing-hydrogen-components) using passthrough props.\n *\n * An image's width and height are determined using the following priority list:\n * 1. The width and height values for the `loaderOptions` prop\n * 2. The width and height values for bare props\n * 3. The width and height values for the `data` prop\n *\n * If only one of `width` or `height` are defined, then the other will attempt to be calculated based on the image's aspect ratio,\n * provided that both `data.width` and `data.height` are available. If `data.width` and `data.height` aren't available, then the aspect ratio cannot be determined and the missing\n * value will remain as `null`\n */\nexport function Image(props) {\n    if (!props.data && !props.src) {\n        throw new Error(`<Image/>: requires either a 'data' or 'src' prop.`);\n    }\n    if (__HYDROGEN_DEV__ && props.data && props.src) {\n        console.warn(`<Image/>: using both 'data' and 'src' props is not supported; using the 'data' prop by default`);\n    }\n    if (props.data) {\n        return React.createElement(ShopifyImage, { ...props });\n    }\n    else {\n        return React.createElement(ExternalImage, { ...props });\n    }\n}\nfunction ShopifyImage({ data, width, height, loading, loader = shopifyImageLoader, loaderOptions, widths, ...rest }) {\n    if (!data.url) {\n        throw new Error(`<Image/>: the 'data' prop requires the 'url' property`);\n    }\n    if (__HYDROGEN_DEV__ && !data.altText && !rest.alt) {\n        console.warn(`<Image/>: the 'data' prop should have the 'altText' property, or the 'alt' prop, and one of them should not be empty. ${`Image: ${data.id ?? data.url}`}`);\n    }\n    const { width: finalWidth, height: finalHeight } = getShopifyImageDimensions({\n        data,\n        loaderOptions,\n        elementProps: {\n            width,\n            height,\n        },\n    });\n    if (__HYDROGEN_DEV__ && (!finalWidth || !finalHeight)) {\n        console.warn(`<Image/>: the 'data' prop requires either 'width' or 'data.width', and 'height' or 'data.height' properties. ${`Image: ${data.id ?? data.url}`}`);\n    }\n    let finalSrc = data.url;\n    if (loader) {\n        finalSrc = loader({\n            ...loaderOptions,\n            src: data.url,\n            width: finalWidth,\n            height: finalHeight,\n        });\n        if (typeof finalSrc !== 'string' || !finalSrc) {\n            throw new Error(`<Image/>: 'loader' did not return a valid string. ${`Image: ${data.id ?? data.url}`}`);\n        }\n    }\n    // determining what the intended width of the image is. For example, if the width is specified and lower than the image width, then that is the maximum image width\n    // to prevent generating a srcset with widths bigger than needed or to generate images that would distort because of being larger than original\n    const maxWidth = width && finalWidth && width < finalWidth ? width : finalWidth;\n    const finalSrcset = rest.srcSet ??\n        internalImageSrcSet({\n            ...loaderOptions,\n            widths,\n            src: data.url,\n            width: maxWidth,\n            loader,\n        });\n    /* eslint-disable hydrogen/prefer-image-component */\n    return (React.createElement(\"img\", { id: data.id ?? '', alt: data.altText ?? rest.alt ?? '', loading: loading ?? 'lazy', ...rest, src: finalSrc, width: finalWidth ?? undefined, height: finalHeight ?? undefined, srcSet: finalSrcset }));\n    /* eslint-enable hydrogen/prefer-image-component */\n}\nfunction ExternalImage({ src, width, height, alt, loader, loaderOptions, widths, loading, ...rest }) {\n    if (!width || !height) {\n        throw new Error(`<Image/>: when 'src' is provided, 'width' and 'height' are required and need to be valid values (i.e. greater than zero). Provided values: 'src': ${src}, 'width': ${width}, 'height': ${height}`);\n    }\n    if (__HYDROGEN_DEV__ && !alt) {\n        console.warn(`<Image/>: when 'src' is provided, 'alt' should also be provided. ${`Image: ${src}`}`);\n    }\n    if (widths &&\n        Array.isArray(widths) &&\n        widths.some((size) => isNaN(size)))\n        throw new Error(`<Image/>: the 'widths' property must be an array of numbers`);\n    let finalSrc = src;\n    if (loader) {\n        finalSrc = loader({ src, width, height, ...loaderOptions });\n        if (typeof finalSrc !== 'string' || !finalSrc) {\n            throw new Error(`<Image/>: 'loader' did not return a valid string`);\n        }\n    }\n    let finalSrcset = rest.srcSet ?? undefined;\n    if (!finalSrcset && loader && widths) {\n        // Height is a requirement in the LoaderProps, so  to keep the aspect ratio, we must determine the height based on the default values\n        const heightToWidthRatio = parseInt(height.toString()) / parseInt(width.toString());\n        finalSrcset = widths\n            ?.map((width) => parseInt(width, 10))\n            ?.map((width) => `${loader({\n            ...loaderOptions,\n            src,\n            width,\n            height: Math.floor(width * heightToWidthRatio),\n        })} ${width}w`)\n            .join(', ');\n    }\n    /* eslint-disable hydrogen/prefer-image-component */\n    return (React.createElement(\"img\", { ...rest, src: finalSrc, \n        // @ts-expect-error TS doesn't understand that it could exist\n        width: loaderOptions?.width ?? width, \n        // @ts-expect-error TS doesn't understand that it could exist\n        height: loaderOptions?.height ?? height, alt: alt ?? '', loading: loading ?? 'lazy', srcSet: finalSrcset }));\n    /* eslint-enable hydrogen/prefer-image-component */\n}\n// based on the default width sizes used by the Shopify liquid HTML tag img_tag plus a 2560 width to account for 2k resolutions\n// reference: https://shopify.dev/api/liquid/filters/html-filters#image_tag\nconst IMG_SRC_SET_SIZES = [352, 832, 1200, 1920, 2560];\nfunction internalImageSrcSet({ src, width, crop, scale, widths, loader, }) {\n    const hasCustomWidths = widths && Array.isArray(widths);\n    if (hasCustomWidths && widths.some((size) => isNaN(size)))\n        throw new Error(`<Image/>: the 'widths' must be an array of numbers`);\n    let setSizes = hasCustomWidths ? widths : IMG_SRC_SET_SIZES;\n    if (!hasCustomWidths &&\n        width &&\n        width < IMG_SRC_SET_SIZES[IMG_SRC_SET_SIZES.length - 1])\n        setSizes = IMG_SRC_SET_SIZES.filter((size) => size <= width);\n    const srcGenerator = loader ? loader : addImageSizeParametersToUrl;\n    return setSizes\n        .map((size) => `${srcGenerator({\n        src,\n        width: size,\n        crop,\n        scale,\n    })} ${size}w`)\n        .join(', ');\n}\n"],"names":["React.createElement"],"mappings":"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"}